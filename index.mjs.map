{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/array.js","../lib/main.js","../lib/assign.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport vind2bind from '@stdlib/ndarray-base-vind2bind' ;\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Applies a function to each element in an ndarray and assigns the result to an element in an output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.ref - reference to original input ndarray-like object\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeInteger} x.length - number of elements\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} x.getter - callback for accessing `x` data buffer elements\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeInteger} y.length - number of elements\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Function} y.setter - callback for setting `y` data buffer elements\n* @param {Function} fcn - function to apply\n* @param {*} thisArg - function execution context\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64' ;\n* import Complex64 from '@stdlib/complex-float32' ;\n* import realf from '@stdlib/complex-realf' ;\n* import imagf from '@stdlib/complex-imagf' ;\n* import naryFunction from '@stdlib/utils-nary-function' ;\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'ref': null,\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'length': 4,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'getter': getter\n* };\n* x.ref = x;\n*\n* var y = {\n*     'ref': null,\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'length': 4,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'setter': setter\n* };\n*\n* // Apply the unary function:\n* map( x, y, naryFunction( scale, 1 ) );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction map( x, y, fcn, thisArg ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar ordx;\n\tvar ordy;\n\tvar len;\n\tvar get;\n\tvar set;\n\tvar ref;\n\tvar shx;\n\tvar shy;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\t// Cache the total number of elements over which to iterate:\n\tlen = x.length;\n\n\t// Cache the input array shape:\n\tshx = x.shape;\n\tshy = y.shape;\n\n\t// Cache references to the input and output ndarray data buffers:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache references to the respective stride arrays:\n\tsx = x.strides;\n\tsy = y.strides;\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays:\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache the respective array orders:\n\tordx = x.order;\n\tordy = y.order;\n\n\t// Cache accessors:\n\tget = x.getter;\n\tset = y.setter;\n\n\t// Cache the reference to the original input array:\n\tref = x.ref;\n\n\t// Check for a zero-dimensional array...\n\tif ( shx.length === 0 ) {\n\t\tset( ybuf, oy, fcn.call( thisArg, get( xbuf, ox ), 0, ref ) );\n\t\treturn;\n\t}\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory (note: this has negative performance implications for non-contiguous ndarrays due to a lack of data locality)...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( shx, sx, ox, ordx, i, MODE );\n\t\tiy = vind2bind( shy, sy, oy, ordy, i, MODE );\n\t\tset( ybuf, iy, fcn.call( thisArg, get( xbuf, ix ), i, ref ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default map;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a function to each element in an array and assigns the result to an element in an output array.\n*\n* @private\n* @param {Object} x - object containing input array data\n* @param {ArrayLikeObject} x.data - input array data\n* @param {Function} x.getter - callback for accessing input array data elements\n* @param {Object} y - object containing output array data\n* @param {ArrayLikeObject} y.data - output array data\n* @param {Function} y.setter - callback for setting output array data elements\n* @param {Function} fcn - function to apply\n* @param {*} thisArg - function execution context\n* @returns {void}\n*\n* @example\n* import naryFunction from '@stdlib/utils-nary-function' ;\n* import abs from '@stdlib/math-base-special-abs' ;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf[ idx ];\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf[ idx ] = value;\n* }\n*\n* // Create the input and output array objects:\n* var x = {\n*     'data': [ -1, -2, -3, -4, -5, -6 ],\n*     'getter': getter\n* };\n* var y = {\n*     'data': [ 0, 0, 0, 0, 0, 0 ],\n*     'setter': setter\n* };\n*\n* map( x, y, naryFunction( abs, 1 ) );\n*\n* var data = y.data;\n* // returns [ 1, 2, 3, 4, 5, 6 ]\n*/\nfunction map( x, y, fcn, thisArg ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar i;\n\n\t// Cache references to the input and output data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.getter;\n\tset = y.setter;\n\n\t// Iterate over each element...\n\tfor ( i = 0; i < xbuf.length; i++ ) {\n\t\tset( ybuf, i, fcn.call( thisArg, get( xbuf, i ), i, xbuf ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default map;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object' ;\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like' ;\nimport isFunction from '@stdlib/assert-is-function' ;\nimport zeros from '@stdlib/array-base-zeros' ;\nimport ndarraylike2object from '@stdlib/ndarray-base-ndarraylike2object' ;\nimport arraylike2object from '@stdlib/array-base-arraylike2object' ;\nimport ndzeros from '@stdlib/ndarray-zeros' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport ndarrayFcn from './ndarray.js' ;\nimport arrayFcn from './array.js' ;\n\n\n// MAIN //\n\n/**\n* Applies a function to each element in an array and assigns the result to an element in a new array.\n*\n* ## Notes\n*\n* -   The applied function is provided the following arguments:\n*\n*     -   **value**: array element.\n*     -   **index**: element index.\n*     -   **arr**: input array.\n*\n* @param {(ArrayLikeObject|ndarray)} arr - input array\n* @param {Function} fcn - function to apply\n* @param {*} [thisArg] - function execution context\n* @throws {TypeError} first argument must be an array-like object or an ndarray\n* @throws {TypeError} second argument must be a function\n* @returns {(Array|ndarray)} output array\n*\n* @example\n* import naryFunction from '@stdlib/utils-nary-function' ;\n* import abs from '@stdlib/math-base-special-abs' ;\n*\n* var arr = [ -1, -2, -3, -4, -5, -6 ];\n*\n* var out = map( arr, naryFunction( abs, 1 ) );\n* // returns [ 1, 2, 3, 4, 5, 6 ]\n*\n* @example\n* import naryFunction from '@stdlib/utils-nary-function' ;\n* import abs from '@stdlib/math-base-special-abs' ;\n* import array from '@stdlib/ndarray-array' ;\n*\n* var opts = {\n*     'dtype': 'generic'\n* };\n* var arr = array( [ [ -1, -2, -3 ], [ -4, -5, -6 ] ], opts );\n*\n* var out = map( arr, naryFunction( abs, 1 ) );\n* // returns <ndarray>\n*\n* var data = out.data;\n* // returns [ 1, 2, 3, 4, 5, 6 ]\n*/\nfunction map( arr, fcn, thisArg ) {\n\tvar out;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( '0ka2S', fcn ) );\n\t}\n\tif ( isndarrayLike( arr ) ) { // note: assertion order matters here, as an ndarray-like object is also array-like\n\t\tarr = ndarraylike2object( arr );\n\t\tout = ndzeros( arr.shape, {\n\t\t\t'dtype': 'generic',\n\t\t\t'order': arr.order\n\t\t});\n\t\tndarrayFcn( arr, ndarraylike2object( out ), fcn, thisArg );\n\t\treturn out;\n\t}\n\tif ( isArrayLikeObject( arr ) ) {\n\t\tout = zeros( arr.length );\n\t\tarrayFcn( arraylike2object( arr ), arraylike2object( out ), fcn, thisArg ); // eslint-disable-line max-len\n\t\treturn out;\n\t}\n\tthrow new TypeError( format( '0kaC4', arr ) );\n}\n\n\n// EXPORTS //\n\nexport default map;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object' ;\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like' ;\nimport isFunction from '@stdlib/assert-is-function' ;\nimport ndarraylike2object from '@stdlib/ndarray-base-ndarraylike2object' ;\nimport arraylike2object from '@stdlib/array-base-arraylike2object' ;\nimport broadcast from '@stdlib/ndarray-base-maybe-broadcast-array' ;\nimport isReadOnly from '@stdlib/ndarray-base-assert-is-read-only' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport ndarrayFcn from './ndarray.js' ;\nimport arrayFcn from './array.js' ;\n\n\n// MAIN //\n\n/**\n* Applies a function to each element in an array and assigns the result to an element in an output array.\n*\n* ## Notes\n*\n* -   The applied function is provided the following arguments:\n*\n*     -   **value**: array element.\n*     -   **index**: element index.\n*     -   **arr**: input array.\n*\n* @param {(ArrayLikeObject|ndarray)} arr - input array\n* @param {(ArrayLikeObject|ndarray)} out - output array\n* @param {Function} fcn - function to apply\n* @param {*} [thisArg] - function execution context\n* @throws {TypeError} first argument must be an array-like object or an ndarray\n* @throws {TypeError} second argument must be an array-like object or an ndarray\n* @throws {TypeError} third argument must be a function\n* @throws {TypeError} input and output arrays must be either both array-like objects or both ndarrays\n* @throws {RangeError} input and output arrays must have the same length\n* @throws {Error} input and output ndarrays must be broadcast compatible\n* @throws {Error} cannot write to a read-only ndarray\n* @returns {(ArrayLikeObject|ndarray)} output array\n*\n* @example\n* import naryFunction from '@stdlib/utils-nary-function' ;\n* import abs from '@stdlib/math-base-special-abs' ;\n*\n* var arr = [ -1, -2, -3, -4, -5, -6 ];\n* var out = [ 0, 0, 0, 0, 0, 0 ];\n*\n* map( arr, out, naryFunction( abs, 1 ) );\n*\n* console.log( out );\n* // => [ 1, 2, 3, 4, 5, 6 ]\n*\n* @example\n* import naryFunction from '@stdlib/utils-nary-function' ;\n* import abs from '@stdlib/math-base-special-abs' ;\n* import array from '@stdlib/ndarray-array' ;\n*\n* var opts = {\n*     'dtype': 'generic',\n*     'shape': [ 2, 3 ]\n* };\n* var arr = array( [ [ -1, -2, -3 ], [ -4, -5, -6 ] ], opts );\n* var out = array( opts );\n*\n* map( arr, out, naryFunction( abs, 1 ) );\n*\n* var data = out.data;\n* // returns [ 1, 2, 3, 4, 5, 6 ]\n*/\nfunction map( arr, out, fcn, thisArg ) {\n\tvar tmp;\n\tvar sh;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( '0ka3Z', fcn ) );\n\t}\n\tif ( isndarrayLike( arr ) ) { // note: assertion order matters here, as an ndarray-like object is also array-like\n\t\tif ( !isndarrayLike( out ) ) {\n\t\t\tthrow new TypeError( format( '0kaC2', out ) );\n\t\t}\n\t\tif ( isReadOnly( out ) ) {\n\t\t\tthrow new Error( format( '0ka1q' ) );\n\t\t}\n\t\tout = ndarraylike2object( out );\n\t\tsh = out.shape;\n\n\t\ttmp = ndarraylike2object( broadcast( arr, sh ) );\n\t\ttmp.ref = arr;\n\t\tarr = tmp;\n\n\t\tndarrayFcn( arr, out, fcn, thisArg );\n\t\treturn out.ref;\n\t}\n\tif ( isArrayLikeObject( arr ) ) {\n\t\tif ( !isArrayLikeObject( out ) || isndarrayLike( out ) ) {\n\t\t\tthrow new TypeError( format( '0kaC3', out ) );\n\t\t}\n\t\tif ( arr.length !== out.length ) {\n\t\t\tthrow new RangeError( format( '0ka1r' ) );\n\t\t}\n\t\tarrayFcn( arraylike2object( arr ), arraylike2object( out ), fcn, thisArg ); // eslint-disable-line max-len\n\t\treturn out;\n\t}\n\tthrow new TypeError( format( '0kaC4', arr ) );\n}\n\n\n// EXPORTS //\n\nexport default map;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a function to each element in an array and assign the result to an element in an output array.\n*\n* @module @stdlib/utils-map\n*\n* @example\n* import naryFunction from '@stdlib/utils-nary-function' ;\n* import abs from '@stdlib/math-base-special-abs' ;\n* import map from '@stdlib/utils-map' ;\n*\n* var arr = [ -1, -2, -3, -4, -5, -6 ];\n*\n* var out = map( arr, naryFunction( abs, 1 ) );\n* // returns [ 1, 2, 3, 4, 5, 6 ]\n*\n* @example\n* import naryFunction from '@stdlib/utils-nary-function' ;\n* import abs from '@stdlib/math-base-special-abs' ;\n* import array from '@stdlib/ndarray-array' ;\n* import map from '@stdlib/utils-map' ;\n*\n* var opts = {\n*     'dtype': 'generic'\n* };\n* var arr = array( [ [ -1, -2, -3 ], [ -4, -5, -6 ] ], opts );\n*\n* var out = map( arr, naryFunction( abs, 1 ) );\n* // returns <ndarray>\n*\n* var data = out.data;\n* // returns [ 1, 2, 3, 4, 5, 6 ]\n*\n* @example\n* import naryFunction from '@stdlib/utils-nary-function' ;\n* import abs from '@stdlib/math-base-special-abs' ;\n* import map from '@stdlib/utils-map' ;\n*\n* var arr = [ -1, -2, -3, -4, -5, -6 ];\n* var out = [ 0, 0, 0, 0, 0, 0 ];\n*\n* map.assign( arr, out, naryFunction( abs, 1 ) );\n*\n* console.log( out );\n* // => [ 1, 2, 3, 4, 5, 6 ]\n*\n* @example\n* import naryFunction from '@stdlib/utils-nary-function' ;\n* import abs from '@stdlib/math-base-special-abs' ;\n* import array from '@stdlib/ndarray-array' ;\n* import map from '@stdlib/utils-map' ;\n*\n* var opts = {\n*     'dtype': 'generic',\n*     'shape': [ 2, 3 ]\n* };\n* var arr = array( [ [ -1, -2, -3 ], [ -4, -5, -6 ] ], opts );\n* var out = array( opts );\n*\n* map.assign( arr, out, naryFunction( abs, 1 ) );\n*\n* var data = out.data;\n* // returns [ 1, 2, 3, 4, 5, 6 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport assign from './assign.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["map","x","y","fcn","thisArg","xbuf","ybuf","ordx","ordy","len","get","set","ref","shx","shy","sx","sy","ox","oy","ix","i","length","shape","data","strides","offset","order","getter","setter","vind2bind","call","arr","out","isFunction","TypeError","format","isndarrayLike","ndarraylike2object","ndzeros","dtype","ndarrayFcn","isArrayLikeObject","zeros","arrayFcn","arraylike2object","tmp","sh","isReadOnly","Error","broadcast","RangeError","setReadOnly","main","assign"],"mappings":";;4mCAmIA,SAASA,EAAKC,EAAGC,EAAGC,EAAKC,GACxB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEAC,EAiCJ,GA9BAX,EAAMR,EAAEoB,OAGRR,EAAMZ,EAAEqB,MACRR,EAAMZ,EAAEoB,MAGRjB,EAAOJ,EAAEsB,KACTjB,EAAOJ,EAAEqB,KAGTR,EAAKd,EAAEuB,QACPR,EAAKd,EAAEsB,QAGPP,EAAKhB,EAAEwB,OACPP,EAAKhB,EAAEuB,OAGPlB,EAAON,EAAEyB,MACTlB,EAAON,EAAEwB,MAGThB,EAAMT,EAAE0B,OACRhB,EAAMT,EAAE0B,OAGRhB,EAAMX,EAAEW,IAGY,IAAfC,EAAIQ,OAKT,IAAMD,EAAI,EAAGA,EAAIX,EAAKW,IACrBD,EAAKU,EAAWhB,EAAKE,EAAIE,EAAIV,EAAMa,EAhK1B,SAkKTT,EAAKL,EADAuB,EAAWf,EAAKE,EAAIE,EAAIV,EAAMY,EAjK1B,SAkKMjB,EAAI2B,KAAM1B,EAASM,EAAKL,EAAMc,GAAMC,EAAGR,SAPtDD,EAAKL,EAAMY,EAAIf,EAAI2B,KAAM1B,EAASM,EAAKL,EAAMY,GAAM,EAAGL,GASxD,CC/HA,SAASZ,EAAKC,EAAGC,EAAGC,EAAKC,GACxB,IAAIC,EACAC,EACAI,EACAC,EACAS,EAWJ,IARAf,EAAOJ,EAAEsB,KACTjB,EAAOJ,EAAEqB,KAGTb,EAAMT,EAAE0B,OACRhB,EAAMT,EAAE0B,OAGFR,EAAI,EAAGA,EAAIf,EAAKgB,OAAQD,IAC7BT,EAAKL,EAAMc,EAAGjB,EAAI2B,KAAM1B,EAASM,EAAKL,EAAMe,GAAKA,EAAGf,GAEtD,CCJA,SAASL,EAAK+B,EAAK5B,EAAKC,GACvB,IAAI4B,EACJ,IAAMC,EAAY9B,GACjB,MAAM,IAAI+B,UAAWC,EAAQ,QAAShC,IAEvC,GAAKiC,EAAeL,GAOnB,OANAA,EAAMM,EAAoBN,GAC1BC,EAAMM,EAASP,EAAIT,MAAO,CACzBiB,MAAS,UACTb,MAASK,EAAIL,QAEdc,EAAYT,EAAKM,EAAoBL,GAAO7B,EAAKC,GAC1C4B,EAER,GAAKS,EAAmBV,GAGvB,OAFAC,EAAMU,EAAOX,EAAIV,QACjBsB,EAAUC,EAAkBb,GAAOa,EAAkBZ,GAAO7B,EAAKC,GAC1D4B,EAER,MAAM,IAAIE,UAAWC,EAAQ,QAASJ,GACvC,CCVA,SAAS/B,EAAK+B,EAAKC,EAAK7B,EAAKC,GAC5B,IAAIyC,EACAC,EACJ,IAAMb,EAAY9B,GACjB,MAAM,IAAI+B,UAAWC,EAAQ,QAAShC,IAEvC,GAAKiC,EAAeL,GAAQ,CAC3B,IAAMK,EAAeJ,GACpB,MAAM,IAAIE,UAAWC,EAAQ,QAASH,IAEvC,GAAKe,EAAYf,GAChB,MAAM,IAAIgB,MAAOb,EAAQ,UAU1B,OAPAW,GADAd,EAAMK,EAAoBL,IACjBV,OAETuB,EAAMR,EAAoBY,EAAWlB,EAAKe,KACtClC,IAAMmB,EAGVS,EAFAT,EAAMc,EAEWb,EAAK7B,EAAKC,GACpB4B,EAAIpB,GACX,CACD,GAAK6B,EAAmBV,GAAQ,CAC/B,IAAMU,EAAmBT,IAASI,EAAeJ,GAChD,MAAM,IAAIE,UAAWC,EAAQ,QAASH,IAEvC,GAAKD,EAAIV,SAAWW,EAAIX,OACvB,MAAM,IAAI6B,WAAYf,EAAQ,UAG/B,OADAQ,EAAUC,EAAkBb,GAAOa,EAAkBZ,GAAO7B,EAAKC,GAC1D4B,CACP,CACD,MAAM,IAAIE,UAAWC,EAAQ,QAASJ,GACvC,CC9BAoB,EAAAC,EAAA,SAAAC"}